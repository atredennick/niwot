### Melt to make even longer dataframe
sim_data_long <- melt(sim_data, id.vars = c("year","lat","lon","plot_id","snow_depth"))
sim_data_long2 <- sim_data_long
sim_data_long2$year <- sim_data_long2$year+1
colnames(sim_data_long2)[7] <- "lag_value"
sim_data_long3 <- merge(sim_data_long, sim_data_long2[,c("year", "plot_id", "variable", "lag_value")])
sim_data_long <- sim_data_long3
sim_data_long$year <- sim_data_long$year-1
####
####  JAGS STATE-SPACE MODEL ----
####
my_model <- "
model{
#### Variance Priors
tau_obs ~ dgamma(0.0001, 0.0001)
tau_proc ~ dgamma(0.0001, 0.0001)
sigma_proc <- 1/sqrt(tau_proc)
for(i in 1:2) {
betayr_tau[i] ~ dgamma(0.0001,0.0001)
intyr_tau[i] ~ dgamma(0.0001,0.0001)
}
#### Fixed Effects Priors
beta0 ~ dnorm(0,0.00001)
beta1 ~ dnorm(0,0.00001)
beta2_mu ~ dnorm(0,0.00001)
for(i in 1:nspp){
beta2[i] ~ dnorm(0, 0.00001)
int[i] ~ dnorm(0,0.00001)
for(t in 1:nyrs){
int_yr[t,i] ~ dnorm(int[i], intyr_tau[i])
}
}
#### Process Model
for(t in 1:n){
Nmed[t] <- int_yr[yr[t],spp[t]] + beta1*lag_value[t] + beta2[spp[t]]*snow[t]
}
#### Data Model
for(i in 1:n){
Nobs[i] ~ dnorm(Nmed[i], tau_obs)
}
}"
####
####  FIT STATE-SPACE MODEL ----
####
###  Prepare data list
snow_by_year <- ddply(sim_data_long, .(year), summarise,
avg_snowdepth = mean(snow_depth))
mydat         <- list(Nobs = sim_data_long$value,
lag_value = sim_data_long$lag_value,
snow = sim_data_long$snow_depth,
n = nrow(sim_data_long),
yr = sim_data_long$year,
nyrs = length(unique(sim_data_long$year)),
npreds = length(unique(sim_data_long$year)),
spp = as.numeric(sim_data_long$variable),
nspp = length(unique(sim_data_long$variable)))
out_variables <- c("int_yr")
###  Send to JAGS
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=1)
update(mc3, n.iter = 10000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
# plot(mc3.out)
mfit <- as.data.frame(as.matrix(mc3.out,chains=TRUE))
mfit$iteration <- 1:nrow(mfit)
####
####  CALCULATE POSTERIOR CORRELATIONS OF RANDOM YEAR EFFECTS ----
####
mfit_long <- melt(mfit, id.vars = c("CHAIN","iteration")) %>%
separate(variable, c("variable","species"), sep = ",") %>%
separate(variable, c("variable", "year"), sep="\\[") %>%
separate(species, c("species", "extra"), sep=-2)
mfit_long <- mfit_long[,-which(colnames(mfit_long)=="extra")]
corr_snoweff <- mfit_long%>%
spread(key=species, value=value, fill=0) %>%
group_by(iteration) %>%
summarise(correlation = cor(`1`,`2`))
mycol <- viridis(1, begin = 0.5)
ggplot(corr_snoweff, aes(x = correlation))+
geom_histogram(color="#EFEFEF", fill=mycol, bins = 30)+
xlab("Posterior Correlation of Random Year Effects")+
ylab("Frequency")+
my_theme
ggsave("post_correlations.png", width = 3.5, height = 2.5, units="in", dpi=300)
####
####  SIMULATE COMMUNITY WITH AND WITHOUT SNOW EFFECT ----
####
### Sample model, tracing all parameters
out_variables <- c("int_yr", "beta2", "beta1")
mc3     <- jags.model(file=textConnection(my_model), data=mydat, n.chains=1)
update(mc3, n.iter = 10000)
mc3.out <- coda.samples(model=mc3, variable.names=out_variables, n.iter=5000)
mfit <- as.data.frame(as.matrix(mc3.out,chains=TRUE))
mfit$iteration <- 1:nrow(mfit)
mfit_long <- melt(mfit, id.vars = c("CHAIN","iteration"))
mfit_long$variable <- as.character(mfit_long$variable)
mfit_long[which(mfit_long$variable=="beta1"),"variable"] <- "beta1[0,0]"
mfit_long[which(mfit_long$variable=="beta2[1]"),"variable"] <- "beta2[0,1]"
mfit_long[which(mfit_long$variable=="beta2[2]"),"variable"] <- "beta2[0,2]"
mfit_decomp <- mfit_long %>%
separate(variable, c("variable","species"), sep = ",") %>%
separate(variable, c("variable", "year"), sep="\\[") %>%
separate(species, c("species", "extra"), sep=-2)
mfit_decomp <- mfit_decomp[,-which(colnames(mfit_decomp)=="extra")]
mfit_means <- mfit_decomp %>%
group_by(variable, year, species) %>%
summarise(mean_value = mean(value))
mfit_means$year <- as.numeric(mfit_means$year)
mfit_means$species <- as.numeric(mfit_means$species)
View(mfit_means)
nsims <- 100
nspp <- 2
yrs <- sample(c(1:9), size = nsims, replace = TRUE)
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
h=1
j=i=1
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
beta_dd
yeardat <- subset(mfit_means, year==yrs[i])
yeardat
snow_effs <- as.numeric(subset(mfit_means, variable=="beta2")["mean_value"])
subset(mfit_means, variable=="beta2")["mean_value"]
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
snow_effs
### Simulate with climate and random years
nsims <- 100
nspp <- 2
yrs <- sample(c(1:9), size = nsims, replace = TRUE)
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"]))
year_snow <- mean(snow_sample[[yrs[i]]])
yhat[i,j] <- intercepts[j] + beta_dd*yhat[i-1,j] + snow_effs[j]*year_snow
}
}
matplot(yhat, type="l")
synch_snow_yrs <- community.sync(yhat)[[1]]
synch_snow_yrs
### Simulate with climate only
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- mean(as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"])))
year_snow <- mean(snow_sample[[yrs[i]]])
yhat[i,j] <- intercepts + beta_dd*yhat[i-1,j] + snow_effs[j]*year_snow
}
}
synch_snow <- community.sync(yhat)[[1]]
synch_snow
year_snow
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- mean(as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"])))
year_snow <- mean(snow_sample[[yrs[i]]])
print(year_snow)
yhat[i,j] <- intercepts + beta_dd*yhat[i-1,j] + snow_effs[j]*year_snow
}
snow_sample[[yrs[i]]]
sample(1:8, 1)
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- mean(as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"])))
year_snow <- snow_sample[[yrs[i]]]
snow_row <- year_snow[sample(1:8, 1)]
print(snow_row)
yhat[i,j] <- intercepts + beta_dd*yhat[i-1,j] + snow_effs[j]*snow_row
}
### Simulate with climate only
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- mean(as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"])))
year_snow <- snow_sample[[yrs[i]]]
snow_row <- year_snow[sample(1:8, 1)]
yhat[i,j] <- intercepts + beta_dd*yhat[i-1,j] + snow_effs[j]*snow_row
}
}
synch_snow <- community.sync(yhat)[[1]]
synch_snow
### Simulate with climate and random years
nsims <- 100
nspp <- 2
yrs <- sample(c(1:9), size = nsims, replace = TRUE)
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"]))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"]))
year_snow <- snow_sample[[yrs[i]]]
snow_row <- year_snow[sample(1:8, 1)]
yhat[i,j] <- intercepts[j] + beta_dd*yhat[i-1,j] + snow_effs[j]*snow_row
}
}
synch_snow_yrs <- community.sync(yhat)[[1]]
synch_snow_yrs
### Simulate with random years only
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"]))
snow_effs <- mean(as.numeric(as.matrix(subset(yeardat, variable=="beta_yr")["mean_value"])))
year_snow <- snow_sample[[yrs[i]]]
snow_row <- year_snow[sample(1:8, 1)]
yhat[i,j] <- intercepts[j] + beta_dd*yhat[i-1,j] + snow_effs*snow_row
}
}
synch_yrs <- community.sync(yhat)[[1]]
synch_yrs
### Simulate with random years only
yhat <- matrix(nrow = nsims, ncol=nspp)
yhat[1,] <- 1
for(j in 1:nspp){
for(i in 2:nsims){
beta_dd <- as.numeric(subset(mfit_means, variable=="beta1")["mean_value"])
snow_effs <- mean(as.numeric(as.matrix(subset(mfit_means, variable=="beta2")["mean_value"])))
yeardat <- subset(mfit_means, year==yrs[i])
intercepts <- as.numeric(as.matrix(subset(yeardat, variable=="int_yr")["mean_value"]))
year_snow <- snow_sample[[yrs[i]]]
snow_row <- year_snow[sample(1:8, 1)]
yhat[i,j] <- intercepts[j] + beta_dd*yhat[i-1,j] + snow_effs*snow_row
}
}
synch_yrs <- community.sync(yhat)[[1]]
synch_yrs
barplot(c(synch_snow_yrs, synch_snow, synch_yrs))
plot_dat <- data.frame(synchrony = c(synch_snow_yrs, synch_snow, synch_yrs),
simulation = c("ASnowYrs","BSnow","CYears"))
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar()+
coord_flip()+
mytheme
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar()+
coord_flip()+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity")+
coord_flip()+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_vline()+
coord_flip()+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.1)+
coord_flip()+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.1)+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, color="simulation"))+
geom_point()+
my_theme
ggplot(plot_dat, aes(x=1, y=synchrony, color="simulation"))+
geom_point()+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color="simulation"))+
geom_point()+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color="simulation"))+
geom_point()+
scale_y_continuous(limits=c(0,1))+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color="simulation"))+
geom_point()+
scale_y_continuous(limits=c(0,0.75))+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony))+
geom_point(aes( color="simulation"))+
scale_y_continuous(limits=c(0,0.75))+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point()+
scale_y_continuous(limits=c(0,0.75))+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point()+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8)+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point()+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8, discrete = TRUE)+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point(shape="*")+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8, discrete = TRUE)+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point(shape="*", size=10)+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8, discrete = TRUE)+
my_theme
ggplot(plot_dat, aes(x="1", y=synchrony, color=simulation))+
geom_point(shape="*", size=12)+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8, discrete = TRUE)+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, color=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_color_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("","",""))
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("","",""))+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity")+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("Random Years\+ Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("synchrony_sims.png", width = 2.5, height = 2.5, units="in", dpi=300)
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity", width=0.5)+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete = TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
guides(fill=FALSE)+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("synchrony_sims.png", width = 2.5, height = 4.5, units="in", dpi=300)
mycol <- viridis(1, begin = 0.4)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("synchrony_sims.png", width = 1.5, height = 4.5, units="in", dpi=300)
ggsave("synchrony_sims.png", width = 2.5, height = 3.5, units="in", dpi=300)
mycol <- viridis(1, begin = 0.4)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
coord_flip()
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
coord_flip()
mycol <- viridis(1, begin = 0.4)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
coord_flip()
ggsave("synchrony_sims.png", width = 2.5, height = 2.5, units="in", dpi=300)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
coord_flip()
ggsave("synchrony_sims.png", width = 4.5, height = 2.5, units="in", dpi=300)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
coord_flip()
ggsave("synchrony_sims.png", width = 4.5, height = 2, units="in", dpi=300)
ggsave("synchrony_sims.png", width = 4, height = 2, units="in", dpi=300)
ggsave(filename = "snowdepth_grid_example.png", width = 3.5, height=2.5, units = "in", dpi=300)
ggplot(snowgrid_long, aes(x=lon, y=lat))+
geom_raster(data = snowgrid_long, aes(x=lon, y=lat, fill=snowdepth))+
geom_point(data=sample_grid, aes(x=sample_lon, y=sample_lat), color="coral")+
geom_point(data=sample_grid, aes(x=sample_lon, y=sample_lat), shape=1)+
scale_fill_viridis(direction = -1, "Snow depth")+
xlab("Easting")+
ylab("Northing")+
my_theme
ggsave(filename = "snowdepth_grid_example.png", width = 3.5, height=2.5, units = "in", dpi=300)
ggsave(filename = "snowdepth_grid_example.png", width = 4, height=2.5, units = "in", dpi=300)
ggplot(corr_snoweff, aes(x = correlation))+
geom_histogram(color="#EFEFEF", fill=mycol, bins = 30)+
xlab("Posterior Correlation of Random Year Effects")+
ylab("Frequency")+
my_theme
ggsave("post_correlations.png", width = 3, height = 2.5, units="in", dpi=300)
ggplot(corr_snoweff, aes(x = correlation))+
geom_histogram(color="#EFEFEF", fill=mycol, bins = 30)+
xlab("Correlation of Random Year Effects")+
ylab("Frequency")+
my_theme
ggsave("post_correlations.png", width = 3, height = 2.5, units="in", dpi=300)
ggplot(plot_dat, aes(x=simulation, y=synchrony))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("Random Years + Snow","Snow Only","Random Years Only"))+
my_theme+
coord_flip()
ggsave("synchrony_sims.png", width = 4, height = 2.5, units="in", dpi=300)
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity", width=0.5, fill=mycol)+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete=TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("","",""))+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity", width=0.5)+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete=TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("","",""))+
my_theme
ggplot(plot_dat, aes(x=simulation, y=synchrony, fill=simulation))+
geom_bar(stat="identity", width=0.5)+
scale_y_continuous(limits=c(0,0.75))+
scale_fill_viridis(end=0.8, discrete=TRUE)+
ylab("Synchrony")+
xlab("Simulation")+
scale_x_discrete(labels = c("","",""))+
guides(fill=FALSE)+
my_theme
ggsave("synchrony_sims.png", width = 3, height = 2.5, units="in", dpi=300)
